What is reconciliation?

reconciliation
The algorithm React uses to diff one tree with another to determine which parts need to be changed.


update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." A high-level description goes something like this: when 
you render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering 
environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via 
setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.

The key points are:

1. In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop 
and degrading the user experience.
2. Different types of updates have different priorities — an animation update needs to complete more quickly than, say, an 
update from a data store.
3. A push-based approach requires the app (you, the programmer) to decide how to schedule work. 
A pull-based approach allows the framework (React) to be smart and make those decisions for you.


We've established that a primary goal of Fiber is to enable React to take advantage of scheduling. Specifically, we need to be able to

pause work and come back to it later.
assign priority to different types of work.
reuse previously completed work.
abort work if it's no longer needed.